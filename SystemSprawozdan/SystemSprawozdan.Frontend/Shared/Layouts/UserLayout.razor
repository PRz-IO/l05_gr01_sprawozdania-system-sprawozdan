@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS

<PageTitle>@PageTitle</PageTitle>
<div class="left-side">
    <UserPad/>
    
    <div class="navigation panel">
        <TitleBar FontSize="18px"/>
        <TabBar TValue="string" ValueChanged="@NavigateTo" Data="@TabBarData" ActiveIndex="@PageIndex" FlexDirection="column"/>
    </div>
</div>

<div class="right-side panel">
    <TitleBar Text="@PageTitle"/>
    @Body
</div>

@code
{
    public int PageIndex { get; set; }
    public string PageTitle { get; set; }

    public readonly IEnumerable<TabBarData<string>> TabBarData = new TabBarData<string>[]
    {
        new()
        {
            Text = "Sprawozdania",
            Value = "reports"
        },
        new()
        {
            Text = "Zespoły",
            Value = "teams"
        },
        new()
        {
            Text = "Twoje dane",
            Value = "personal-data"
        },
    };

    protected override void OnAfterRender(bool firstRender)
    {
        var task = Task.Run(Logout);
        task.Wait(50);
        
        if (firstRender)
        {
            PageIndex = GetActiveIndex();
            PageTitle = TabBarData.ElementAt(PageIndex).Text;
            StateHasChanged();
        }
    }

    public int GetActiveIndex()
    {
        var uri = NavigationManager.Uri;
        foreach (var data in TabBarData)
        {
            if (uri.Contains(data.Value))
                return TabBarData.IndexOf(data);
        }
        return 1;
    }

    public async void NavigateTo(string link)
    {
        PageIndex = TabBarData.FindIndex(el => el.Value.Equals(link));
        PageTitle = TabBarData.ElementAt(PageIndex).Text;
        StateHasChanged();
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var userRole = authState.User.FindFirst(claim => claim.Type == ClaimTypes.Role).Value;
        NavigationManager.NavigateTo($"{userRole}/{link}");
    }

    private async void Logout()
    {
        var url = NavigationManager.Uri;
        if (url.Contains("login") || url.Contains("register") || url.Contains("restore-password"))
        {
            await JS.InvokeVoidAsync("localStorage.removeItem", "token");
            await AuthStateProvider.GetAuthenticationStateAsync();
        }
    }
}