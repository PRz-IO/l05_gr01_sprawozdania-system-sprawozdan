@page "/edit/{StudentReportId:int?}"
@using SystemSprawozdan.Frontend.Services.StudentServices
@inject ISReportHttpService ReportHttpService

<PageTitle>Edytuj sprawozdanie</PageTitle>

<div class="body-container">
    <span class="report-topic-info"><b>@ReportTopic?.SubjectName: </b><span class="report-topic-info__topic-and-group-type">"@ReportTopic?.ReportTopicName" - @ReportTopic?.SubjectGroupType</span> </span>
    <div class="main-container">
        <div class="left-column">
            <div class="input-file">
                <FileInputComponent OnFileAdd="OnInputFileChange"/>
            </div>
            <div class="file-list">
                <FileList ExistingFiles="SubmittedFilesList" FilesToSend="FilesToSend" OnDownloadFile="DownloadFile" OnRemoveFile="RemoveFileFromList"/>
            </div>
        </div>
        
        <div class="right-column">
            <p class="mark-text">Ocena: @(StudentReport.Mark is not null ? EnumTranslator.Mark[StudentReport.Mark] : "W trakcie oceniania...")</p>
            <MatTextField TValue="string" @bind-Value="@StudentReport.StudentNote" Label="Komentarz dla prowadzącego:" Outlined="true" TextArea="true" Style="height: 30%;"/>
            <MatTextField TValue="string" @bind-Value="@StudentReport.TeacherNote" Label="Informacje od prowadzącego:" Outlined="true" TextArea="true" ReadOnly="true" Disabled="true" Style="height: 30%;"/>
            <MatButton OnClick="@(() => Send())" Label="Prześlij" Unelevated="true" Class="send-button" Style="height: 12%"></MatButton>
        </div>
    </div>
</div>


@code{
    [Parameter]
    public int StudentReportId { get; set; }

    public StudentReportGetDto StudentReport { get; set; } = new();
    public ReportTopicGetDto ReportTopic { get; set; } = new();
    
    public List<IBrowserFile> FilesToSend = new();
    
    public List<StudentReportFileGetDto> SubmittedFilesList = new();
    
    public async Task DownloadFile(StudentReportFileGetDto file)
    {
        await ReportHttpService.DownloadFilesFromStudentReport(file);
    }

    public void RemoveFileFromList(IBrowserFile file)
    {
        FilesToSend.Remove(file);
    }

    public async Task OnInputFileChange(List<IBrowserFile> files)
    {
        FilesToSend.AddRange(files);
    }

    public void Send()
    {
        SendFiles();
        SendReport();
    }

    public async void SendFiles()
    {
        await ReportHttpService.UploadFilesForStudentReport(StudentReportId, FilesToSend);
    }

    public async void SendReport()
    {
        if (string.IsNullOrEmpty(StudentReport.StudentNote)) return;

        var reportToSend = new StudentReportPutDto { ReportCommentFromStudent = StudentReport.StudentNote };
        await ReportHttpService.PutStudentReport(StudentReportId, reportToSend);
    }
    
    protected override async Task OnInitializedAsync()
    {
        StudentReport = await ReportHttpService.GetStudentReport(StudentReportId);
        SubmittedFilesList = await ReportHttpService.GetStudentReportFiles(StudentReportId);
        ReportTopic = await ReportHttpService.GetReportTopic(StudentReport.ReportTopicId);
    }
}
