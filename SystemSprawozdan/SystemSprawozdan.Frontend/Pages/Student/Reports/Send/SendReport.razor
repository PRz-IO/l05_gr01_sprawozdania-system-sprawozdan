@page "/student/reports/{ReportTopicId:int?}"
@inject NavigationManager NavigationManager
@inject IMatToaster MatToaster
@inject ISReportHttpService ReportHttpService

<PageTitle>Wyślij sprawozdanie</PageTitle>

<div class="body-container">
    <div class="report-topic-info">
        <b>@ReportTopic?.SubjectName: </b><span class="report-topic-info__topic-and-group-type">"@ReportTopic?.ReportTopicName" - @ReportTopic?.SubjectGroupType</span>
    </div>
    <div class="main-container">
        <div class="left-column">
            <div class="input-file">
                <FileInputComponent OnFilesAdded="HandleNewFiles"/>
            </div>

            @if (FilesToSend.Count != 0)
            {
                <div class="file-list">
                    <FileList FilesToSend="FilesToSend" OnFileRemoved="@HandleRemoveFile"/>
                </div>
            }
        </div>

        <div class="right-column">
            <p class="deadline">Termin oddania: @ReportTopic.ReportTopicDeadline.ToString("g")</p>
            <MatTextField TValue="string" @bind-Value="StudentReport.StudentNote" Label="Komentarz dla prowadzącego:" Outlined="true" TextArea="true" Style="height: 50%;"/>
            <div class="radio-buttons__and-description">
                <p class="radio-button-description">Sposób oddania:</p>
                <div class="radio-buttons">
                    <MatRadioGroup @bind-Value="@StudentReport.IsIndividual" TValue="bool" Style="display: flex">
                        <MatRadioButton Value="@true" TValue="bool">Indywidualnie</MatRadioButton>
                        <MatRadioButton Value="@false" TValue="bool">Grupowo</MatRadioButton>
                    </MatRadioGroup>
                </div>
            </div>
            <MatButton OnClick="@(() => CreateReport())" Label="Prześlij" Unelevated="true" Class="send-button" Style="height: 12%"></MatButton>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int? ReportTopicId { get; set; }

    public StudentReportPostDto StudentReport { get; set; } = new();

    public ReportTopicGetDto ReportTopic { get; set; } = new();

    public List<IBrowserFile> FilesToSend = new();

    protected override async Task OnInitializedAsync()
    {
        StudentReport.ReportTopicId = ReportTopicId ?? 1;
        ReportTopic = await ReportHttpService.GetReportTopic(ReportTopicId ?? 1);
    }

    public void HandleNewFiles(List<IBrowserFile> files)
    {
        FilesToSend.AddRange(files);
    }

    public void HandleRemoveFile(IBrowserFile file)
    {
        FilesToSend.Remove(file);
    }

    public async void CreateReport()
    {
        try
        {
            var reportId = await ReportHttpService.PostStudentReport(StudentReport);
            await ReportHttpService.UploadFilesForStudentReport(reportId, FilesToSend);
            MatToaster.Add("Udało się wysłać sprawozdanie!", MatToastType.Success, "Sukces");
            NavigationManager.NavigateTo($"/student/reports/{ReportTopicId}/{reportId}");
        }
        catch (Exception e)
        {
            MatToaster.Add("Nie udało się wysłać sprawozdania!", MatToastType.Danger, "Error");
        }
    }
}