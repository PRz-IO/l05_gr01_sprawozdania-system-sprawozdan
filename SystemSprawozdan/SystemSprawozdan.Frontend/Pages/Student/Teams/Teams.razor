@page "/Student/teams"
@inject NavigationManager NavigationManager
@inject IAppHttpClient AppHttpClient

<div>
    <TabBar TValue="bool" @bind-Value="@isUserBelong" Data="@TabBarData" FlexDirection="row" />
</div>
<div style="overflow:auto">
    @if (Subject is null)
    {
        <LoadingBar IsLoading="true" />
    }
    else if (Subject.Count == 0)
    {
        <div class="table__no-data">Brak grup do wyświetlenia</div>
    }
    else if (Subject.Count != 0)
    {
        <MatAccordion Multi="true">
            @for (var counter = 0; counter < Subject.Count(); counter++)
            {
                var counterCapture = counter;
                <MatExpansionPanel>
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelHeader>@Subject[counterCapture].Name</MatExpansionPanelHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                        @if (SubjectGroup[counterCapture].Count() != 0)
                        {
                            <MatTable Items="@SubjectGroup[counterCapture]" ShowPaging="false">
                                <MatTableHeader>
                                    <th class="table__header-cell--small">Rok</th>
                                    <th class="table__header-cell--normal">Rodzaj</th>
                                    <th class="table__header-cell--small">Grupa</th>
                                    <th class="table__header-cell--big">Prowadzący</th>
                                    <th></th>
                                </MatTableHeader>
                                <MatTableRow>
                                    <td>@context.MajorCode</td>
                                    <td>@context.GroupType</td>
                                    <td>@context.Name</td>
                                    <td>@context.TeacherDegree @context.TeacherName @context.TeacherSurname</td>
                                    @if (!_isUserBelong)
                                    {
                                        <td><div class="table__row-icon"><MatIcon Icon="@MatIconNames.Arrow_forward" Style="height: 100%" Class="pointer" @onclick="() => HandleSelectedSubject(context.Id)" /></div></td>
                                    }
                                </MatTableRow>
                            </MatTable>
                        }
                        else
                        {
                            <p>Brak dostępnych grup</p>
                        }
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>
            }
        </MatAccordion>
    }
</div>
@code {
    public List<SubjectGetDto> Subject;
    public List<List<SubjectGroupGetDto>> SubjectGroup = new List<List<SubjectGroupGetDto>>();
    public async void HandleSelectedSubject(int groupId)
    {
        NavigationManager.NavigateTo("student/teams/" + groupId);
    }

    protected override Task OnInitializedAsync()
    {
        GetSubject();
        return base.OnInitializedAsync();
    }

    public async Task GetSubject()
    {
        Subject = null;
        SubjectGroup = new();
        Subject = await AppHttpClient.Get<List<SubjectGetDto>>("Subject");
        foreach (var subject in Subject)
        {
            var parameter = new HttpParameter("isUser", isUserBelong);
            var subjectGroup = await AppHttpClient.Get<List<SubjectGroupGetDto>>("SubjectGroup/" + subject.Id, parameter);

            SubjectGroup.Add(subjectGroup);
        }
        StateHasChanged();
    }

    //Top menu
    public int myTeams { get; set; }
    public bool isUserBelong
    {
        get => _isUserBelong; set
        {
            _isUserBelong = value;
            GetSubject();
        }
    }
    private bool _isUserBelong;

    public IEnumerable<TabBarData<bool>> TabBarData { get; set; } = new TabBarData<bool>[]
    {
        new()
        {
            Text = "Dostępne zespoły",
            Value = false
        },
        new()
        {
            Text = "Moje zespoły",
            Value = true
        },
    };
}
