@page "/login"
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigatorManager

<EditForm Style="height: 100%; width: 100%; display: flex;flex: 1 1 0;flex-direction: column;justify-content: center;" Model="User" OnValidSubmit="TryLogin">
    <DataAnnotationsValidator />
    <div class="form-block">
        <div class="form-block-textfield">
            <p>
                <MatTextField Style="width: 100%;" @bind-Value="@User.Login" Label="Login" Outlined="true"></MatTextField>
                <ValidationMessage For="@(() => User.Login)" style="font-size:12px;" />
            </p>
            <p>
                <MatTextField Style="width: 100%;" @bind-Value="@User.Password" Label="Haslo" Type="password" Outlined="true"></MatTextField>
                <ValidationMessage For="@(() => User.Password)" style="font-size:12px;" />
            </p>
        </div>
    </div>
    <MatButton Type="submit" Style="height: 80px; font-size: var(--font-size-large);" Raised="true">Zaloguj</MatButton>
</EditForm>

@code
{
    [Parameter]
    [SupplyParameterFromQuery]
    public string? ReturnUrl { get; set; }
    
    public LoginUserDto User { get; } = new LoginUserDto()
    {
        Login = "",
        Password = ""
    };

    public async void TryLogin()
    {
        await AuthService.Login(User);
        await AuthStateProvider.GetAuthenticationStateAsync();
        
        if (string.IsNullOrEmpty(ReturnUrl))
            NavigatorManager.NavigateTo("/");
        else
            NavigatorManager.NavigateTo(ReturnUrl);
    }
}